.. -*- mode: rst -*-

Note for Week 8 about a syntax checker for Scheme, Part II/II
=============================================================

.. seealso::

   `The Scheme Programming Language`__
     by `R. Kent Dybvig <http://en.wikipedia.org/wiki/Kent_Dybvig>`_

.. __: http://www.scheme.com/tspl4/


Mandatory exercise
-------------------

* :ref:`exercise-syntax-checker-for-scheme-part-2`: a self-applicable
  syntax checker for Scheme, Part II/II


Resources
---------

* The Scheme code
  `to get you started with your syntax checker
  <http://users-cs.au.dk/danvy/CS6202/Supplementary-material/week-8-a-syntax-checker-for-Scheme-part-2.scm>`_
  (latest version: 15 Sep 2015).

* `The online syntax checker <https://users-cs.au.dk/zerny/dProgSprog/syntax-checker.php>`_.


.. index::
   single: syntax checker (for Scheme, in Scheme, Part II/II)

.. _exercise-syntax-checker-for-Scheme-part-2:

Exercise 1
----------

The goal of this mandatory exercise is to complete `your syntax
checker from two weeks ago
<week-6-a-syntax-checker-for-Scheme-part-1.html>`_ for the complete
BNF of the following subset of Scheme, and to program a syntax checker
that is self-applicable.

Compared to last week, here are the new syntactic forms:

* case-expressions,

* letstar-expressions,

* quasiquote-expressions,

* inconsequential cond-clauses,

* binding cond-clauses,

* trace-lambda-abstractions, and

* variadic lambda-abstractions.


.. bnf:: pure Scheme part 2
   :noindex:
   :namespace: pure-scheme-part-2

   <program> ::= ({<toplevel-form>}*)
 
   <toplevel-form> ::= <definition>
                     | <expression>
 
   <definition> ::= (define <variable> <expression>)

   <expression> ::= <number>
                  | <boolean>
                  | <character>
                  | <string>
                  | <variable>
                  | <time-expression>
                  | <if-expression>
                  | <cond-expression>
                  | <case-expression>
                  | <and-expression>
                  | <or-expression>
                  | <let-expression>
                  | <letstar-expression>
                  | <letrec-expression>
                  | <begin-expression>
                  | <quote-expression>
                  | <quasiquote-expression>
                  | <lambda-abstraction>
                  | <application>

   <time-expression> ::= (time <expression>)

   <if-expression> ::= (if <expression> <expression> <expression>)

   <cond-expression> ::= (cond
                           {<cond-clause>}*
                           [else <expression>])
   
   <cond-clause> ::= [<expression>]
                   | [<expression> <expression>]
                   | [<expression> => <expression>]

   <case-expression> ::= (case <expression>
                           {[({<quotation>}*) <expression>]}*
                           [else <expression>])

   <and-expression> ::= (and {<expression>}*)

   <or-expression> ::= (or {<expression>}*)

   <let-expression> ::= (let ({[<variable> <expression>]}*) <expression>)
                        ;;; where all the variables are distinct

   <letstar-expression> ::= (let* ({[<variable> <expression>]}*) <expression>)

   <letrec-expression> ::= (letrec ({[<variable> <lambda-abstraction>]}*) <expression>)
                           ;;; where all the variables are distinct

   <begin-expression> ::= (begin {<expression>}* <expression>)

   <quote-expression> ::= (quote <quotation>)
 
   <quotation> ::= <number>
                 | <boolean>
                 | <character>
                 | <string>
                 | <symbol>
                 | ()
                 | (<quotation> . <quotation>)

   <quasiquote-expression> ::= (quasiquote <quasiquotation_0>)

   <quasiquotation_0> ::= <number>
                        | <boolean>
                        | <character>
                        | <string>
                        | <symbol>
                        | ()
                        | (quasiquote <quasiquotation_1>)
                        | (unquote <expression>)
                        | (unquote-splicing <expression>)
                        | (<quasiquotation_0> . <quasiquotation_0>)
 
   <quasiquotation_j> ::= <number>
                        | <boolean>
                        | <character>
                        | <string>
                        | <symbol>
                        | ()
                        | (quasiquote <quasiquotation_k>)
                          ;;; where k = j + 1
                        | (unquote <quasiquotation_i>)
                          ;;; where j = i + 1
                        | (unquote-splicing <quasiquotation_i>)
                          ;;; where j = i + 1
                        | (<quasiquotation_j> . <quasiquotation_j>)

   <lambda-abstraction> ::= (lambda <lambda-formals> <expression>)
                          | (trace-lambda <quotation> <lambda-formals> <expression>)
  
   <lambda-formals> ::= <variable>
                      | ({<variable>}*)
                        ;;; where all the variables are distinct
                      | ({<variable>}+ . <variable>)
                        ;;; where all the variables are distinct

   <application> ::= (<expression> {<expression>}*)

where:

* the non-terminal
  :bnfref:`pure-scheme-with-quasiquotation:quasiquotation_j` is
  indexed with a natural number j indicating the number of
  quasiquotation nestings; initially this index is 0
  (:bnfref:`pure-scheme-with-quasiquotation:quasiquotation_0` just
  above); a nested quasiquotation increments the index by 1 (from
  :bnfref:`pure-scheme-with-quasiquotation:quasiquotation_j` to
  :bnfref:`pure-scheme-with-quasiquotation:quasiquotation_k`, where k
  = j + 1, just above), and unquoting decrements a strictly positive
  index by 1 (from
  :bnfref:`pure-scheme-with-quasiquotation:quasiquotation_j` to
  :bnfref:`pure-scheme-with-quasiquotation:quasiquotation_i`, where j
  = i + 1, just above); and

* the expressions ``(quasiquote <quasiquotation_1>)``, ``(unquote
  <expression>)``, ``(unquote-splicing <expression>)``, ``(quasiquote
  <quasiquotation_k>)`` ``(unquote <quasiquotation_i>)``, and
  ``(unquote-splicing <quasiquotation_i>)`` are unambiguously parsed
  as special forms where ``quasiquote``, ``unquote``, and
  ``unquote-splicing`` are keywords.

An online syntax checker is available `here`__.
(As usual, eternal glory and a chocolate piece for you
if you find a bug in it.)

.. __: https://users-cs.au.dk/zerny/dProgSprog/syntax-checker.php

Here is some code to get you started, including unit tests.

.. code-block:: scheme

  ;;;;;;;;;;
  
  (define the-current-well-formed-thing
    "not initialized yet")
  
  ;;; returns #t if all the well-formed things are deemed well formed
  ;;; returns #f if at least one of the well-formed things is deemed ill formed
  ;;; in case of hard error, the faulty thing is bound to the-current-well-formed-thing
  (define test-well-formed-things
    (lambda (check things)
      (letrec ([visit (lambda (things b)
                        (cond
                          [(null? things)
                           (begin
                             (set! the-current-well-formed-thing "not initialized yet")
                             b)]
                          [(pair? things)
                           (begin
                             (set! the-current-well-formed-thing (car things))
                             (if (check (car things))
                                 (visit (cdr things) b)
                                 (begin
                                   (printf "improperly rejected: ~s~n"
                                           (car things))
                                   (visit (cdr things) #f))))]
                          [else
                           (errorf 'test-well-formed-things
                                   "ill-formed list: ~s"
                                   things)]))])
        (visit things #t))))
  
  (define well-formed-definitions
    '((define x 1)
      (define y #t)
      ;;; etc.
      ))
  
  ;;; use: (test-well-formed-things (lambda (v) (and (is-definition? v) (check-toplevel-form v))) well-formed-definitions)
  ;;; returns #t if all is well
  
  (define well-formed-expressions
    '(42
  
      #t
  
      #\a
  
      "hello world"
  
      x
  
      (time 42)
  
      (if 1 2 3)
  
      (and)
      (and 1)
      (and 1 2)
  
      (or)
      (and 1)
      (and 1 2)
  
      (cond [1 2] [3 4] [else 33])
      (cond [else 33])
      ;;; etc.
      ))
  
  ;;; use: (test-well-formed-things check-expression well-formed-expressions)
  ;;; returns #t if all is well
  
  ;;;;;;;;;;
  
  (define the-current-ill-formed-thing
    "not initialized yet")
  
  ;;; returns #t if all the ill-formed things are deemed ill formed
  ;;; returns #f if at least one of the ill-formed things is deemed well formed
  ;;; in case of hard error, the faulty thing is bound to the-current-ill-formed-thing
  (define test-ill-formed-things
    (lambda (check things)
      (letrec ([visit (lambda (things b)
                        (cond
                          [(null? things)
                           (begin
                             (set! the-current-ill-formed-thing "not initialized yet")
                             b)]
                          [(pair? things)
                           (begin
                             (set! the-current-ill-formed-thing (car things))
                             (if (check (car things))
                                 (begin
                                   (printf "improperly accepted: ~s~n"
                                           (car things))
                                   (visit (cdr things) #f))
                                 (visit (cdr things) b)))]
                          [else
                           (errorf 'test-ill-formed-things
                                   "ill-formed list: ~s"
                                   things)]))])
        (visit things #t))))
  
  (define ill-formed-definitions
    '((define)
      (define . x)
      (define x)
      (define x y . z)
      (define x y z)
      ;;; etc.
      ))
  
  ;;; use: (test-ill-formed-things check-definition ill-formed-definitions)
  ;;; returns #t if all is well
  
  (define ill-formed-expressions
    '(else
  
      (time)
      (time . 42)
      (time 42 . 43)
      (time 42 43)
  
      (if)
      (if . 1)
      (if 1)
      (if 1 . 2)
      (if 1 2)
      (if 1 2 . 3)
      (if 1 2 3 . 4)
      (if 1 2 3 4)
  
      (and . 1)
      (and 1 . 2)
      (and 1 2 . 3)
  
      (cond)
      (cond . 1)
      (cond else)
      (cond . else)
      (cond [else])
      (cond [esle 33])
      (cond [else . 1] . 2)
      (cond [else 1] 2)
      (cond [] [else 42])
      (cond [1 . 2] [else 42])
      (cond [1 2] [3 4])
  
      ;;; etc.
      ))
  
  ;;; use: (test-ill-formed-things check-expression ill-formed-expressions)
  ;;; returns #t if all is well
  
  ;;;;;;;;;;

  ;;;;;;;;;;
  ;;; basic predicates and accessors for expressions:
  ;;;;;;;;;;
  
  ;;;;;
  
  ;;; predicate:
  (define is-quasiquote?
    (lambda (v)
      (and (proper-list-of-given-length? v 2)
           (equal? (car v) 'quasiquote))))      
  
  ;;; 1st accessor:
  (define quasiquote-1
    (lambda (v)
      (list-ref v 1)))
  
  ;;;;;;;;;;
  ;;; the syntax checker proper for expressions:
  ;;;;;;;;;;
  
  (define check-expression
    (lambda (v)
      (cond
        [(is-number? v)
         (check-number v)]
        [(is-boolean? v)
         (check-boolean v)]
        [(is-character? v)
         (check-character v)]
        [(is-string? v)
         (check-string v)]
        [(is-variable? v)
         (check-variable v)]
        [(is-time? v)
         (check-time-expression (time-1 v))]
        [(is-if? v)
         (check-if-expression (if-1 v) (if-2 v) (if-3 v))]
        [(is-quote? v)
         (check-quote-expression (quote-1 v))]
        [(is-quasiquote? v)
         (check-quasiquote-expression (quasiquote-1 v))]
        [(is-application? v)
         (check-application (application-operator v) (application-operands v))]
        [else
         (begin
           (printf "~s -- unrecognized input: ~s~n"
                   'check-expression
                   v)
           #f)])))
  
  (define check-quasiquote-expression
    (lambda (v)
      (letrec ([visit (lambda (v number-of-nestings)
                        (errorf 'check-quasiquote-expression "not implemented yet"))])
        (visit v 0))))
  
  ;;;;;;;;;;

Example of use::

  Petite Chez Scheme Version 8.4
  Copyright (c) 1985-2011 Cadence Research Systems
  
  > (load "my-very-own-self-applicable-syntax-checker-oh-yeah.scm")
  > (check-file "my-very-own-self-applicable-syntax-checker-oh-yeah.scm")
  #t
  > (check-file "week-6-basic-imperative-language_a-syntax-checker.scm")
  #t
  > (check-file "week-6-basic-imperative-language_an-interpreter.scm")
  #t
  > (check-expression '(if 1 2 3))
  #t
  > (check-expression '(time is money))
  #f
  > (check-file "self-interpreter.scm")
  #t
  > 

Voilà.  Happy hacking.


Resources
---------

* The Scheme code
  `to get you started with your syntax checker
  <http://users-cs.au.dk/danvy/CS6202/Supplementary-material/week-8-a-syntax-checker-for-Scheme-part-2.scm>`_
  (latest version: 15 Sep 2015).

* `The online syntax checker <https://users-cs.au.dk/zerny/dProgSprog/syntax-checker.php>`_.


Version
-------

Fixed a state URL,
thanks to Cai Zhuohong's eagle eye
[08 Nov 2015]

Created
[15 Sep 2015]
