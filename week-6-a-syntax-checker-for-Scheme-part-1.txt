.. -*- mode: rst -*-

Note for Week 6 about a syntax checker for Scheme, Part I/II
============================================================

.. seealso::

   `The Scheme Programming Language`__
     by `R. Kent Dybvig <http://en.wikipedia.org/wiki/Kent_Dybvig>`_

.. __: http://www.scheme.com/tspl4/


Mandatory exercise
-------------------

* :ref:`exercise-syntax-checker-for-scheme-part-1`:
  a self-applicable syntax checker for Scheme, Part I/II


Resources
---------

* The Scheme code
  `to get you started with your syntax checker
  <http://users-cs.au.dk/danvy/CS6202/Supplementary-material/week-6-a-syntax-checker-for-Scheme-part-1.scm>`_
  (latest version: 15 Sep 2015).

* `The online syntax checker <https://users-cs.au.dk/zerny/dProgSprog/syntax-checker.php>`_.


.. index::
   single: syntax checker (for Scheme, in Scheme, Part I/II)

.. _exercise-syntax-checker-for-Scheme-part-1:

Exercise 1
----------

The goal of this mandatory exercise is to implement the BNF of the
following subset of Scheme, and to program a syntax checker that is
self-applicable.  Besides being self-applicable, your syntax checker
should not crash, diverge, or raise errors.  It should return:

* ``#t`` when it is given a syntactically correct Scheme program,
  i.e., a list of toplevel forms, and

* ``#f`` when it is given a syntactically incorrect Scheme program.

Here is a simple grammar for Scheme, with simplified conditional
expressions and lambda-abstractions, and without case expressions and
quasiquotation, which you will treat next week
(:ref:`exercise-syntax-checker-for-scheme-part-2`):

.. bnf:: pure Scheme part 1
   :noindex:
   :namespace: pure-scheme-part-1

   <program> ::= ({<toplevel-form>}*)
 
   <toplevel-form> ::= <definition>
                     | <expression>
 
   <definition> ::= (define <variable> <expression>)

   <expression> ::= <number>
                  | <boolean>
                  | <character>
                  | <string>
                  | <variable>
                  | <time-expression>
                  | <if-expression>
                  | <cond-expression>
                  | <and-expression>
                  | <or-expression>
                  | <let-expression>
                  | <letrec-expression>
                  | <begin-expression>
                  | <quote-expression>
                  | <lambda-abstraction>
                  | <application>

   <time-expression> ::= (time <expression>)

   <if-expression> ::= (if <expression> <expression> <expression>)

   <cond-expression> ::= (cond
                           {<cond-clause>}*
                           [else <expression>])
   
   <cond-clause> ::= [<expression> <expression>]

   <and-expression> ::= (and {<expression>}*)

   <or-expression> ::= (or {<expression>}*)

   <let-expression> ::= (let ({[<variable> <expression>]}*) <expression>)
                        ;;; where all the variables are distinct

   <letrec-expression> ::= (letrec ({[<variable> <lambda-abstraction>]}*) <expression>)
                           ;;; where all the variables are distinct

   <begin-expression> ::= (begin {<expression>}* <expression>)

   <quote-expression> ::= (quote <quotation>)
 
   <quotation> ::= <number>
                 | <boolean>
                 | <character>
                 | <string>
                 | <symbol>
                 | ()
                 | (<quotation> . <quotation>)

   <lambda-abstraction> ::= (lambda <lambda-formals> <expression>)
  
   <lambda-formals> ::= ({<variable>}*)
                        ;;; where all the variables are distinct

   <application> ::= (<expression> {<expression>}*)

where:

* a number is a value that answers ``#t`` to the predicate ``number?``;

* a Boolean is a value that answers ``#t`` to the predicate ``boolean?``;

* a character is a value that answers ``#t`` to the predicate ``char?``;

* a string is a value that answers ``#t`` to the predicate ``string?``;

* a symbol is a value that answers ``#t`` to the predicate
  ``symbol?``;

* a variable is a value that answers ``#t`` to the predicate
  ``symbol?`` and that is not a keyword (as defined just below); and

* keywords are the symbols ``define``, ``time``, ``if``, ``cond``,
  ``else``, ``case``, ``and``, ``or``, ``let``, ``let*``, ``letrec``,
  ``begin``, ``quote``, ``quasiquote``, ``unquote``,
  ``unquote-splicing``, ``lambda``, and ``trace-lambda``.

An online syntax checker is available `here`__, where the toplevel
forms need not be put into a toplevel list.  (As usual, eternal glory
and a chocolate piece for you if you find a bug in it.  Note, though,
that this syntax checker handles a superset of the grammar above, as
described in Part II of the present exercise,
:ref:`exercise-syntax-checker-for-scheme-part-2`.)

.. __: https://users-cs.au.dk/zerny/dProgSprog/syntax-checker.php

Here is some code to get you started.  (Note:
``proper-list-of-given-length?`` was already defined in the lecture
notes of `Week 4 <week-4-regular-expressions.html>`_.  For good
measure, it is defined once more in `the next lecture note
<week-6-basic-imperative-language_a-syntax-checker.html>`_.)

.. code-block:: scheme

  ;;;;;;;;;;
  
  (define check-silently
    #t)
  
  ;;;;;;;;;;
  
  (define check-program
    (lambda (v)
      (cond
        [(null? v)
         #t]
        [(pair? v)
         (and (check-toplevel-form (car v))
              (check-program (cdr v)))]
        [else
         (begin
           (or check-silently
               (printf "check-program -- unrecognized input: ~s~n" v))
           #f)])))
  
  ;;;;;;;;;;
  
  (define check-toplevel-form
    (lambda (v)
      (cond
        [(is-definition? v)
         (check-definition (define-1 v) (define-2 v))]
        [else
         (check-expression v)])))
  
  ;;;;;;;;;;
  
  ;;;;;;;;;;
  ;;; basic predicates and accessors for definitions:
  ;;;;;;;;;;
  
  ;;; predicate:
  (define is-definition?
    (lambda (v)
      (and (proper-list-of-given-length? v 3)
           (equal? (car v) 'define))))
  
  ;;; 1st accessor:
  (define define-1
    (lambda (v)
      (list-ref v 1)))
  
  ;;; 2nd accessor:
  (define define-2
    (lambda (v)
      (list-ref v 2)))
  
  ;;;;;;;;;;
  ;;; the syntax checker proper for definitions:
  ;;;;;;;;;;
  
  (define check-definition
    (lambda (name definiens)
      (and (check-variable name)
           (check-expression definiens))))
  
  ;;;;;;;;;;
  
  ;;;;;;;;;;
  ;;; basic predicates and accessors for expressions:
  ;;;;;;;;;;
  
  ;;;;;
  
  ;;; predicate:
  (define is-number?
    (lambda (v)
      (number? v)))
  
  ;;;;;
  
  ;;; predicate:
  (define is-boolean?
    (lambda (v)
      (boolean? v)))
  
  ;;;;;
  
  ;;; predicate:
  (define is-character?
    (lambda (v)
      (errorf 'is-character? "not implemented yet")))
  
  ;;;;;
  
  ;;; predicate:
  (define is-string?
    (lambda (v)
      (errorf 'is-string? "not implemented yet")))
  
  ;;;;;
  
  ;;; predicate:
  (define is-variable?
    (lambda (v)
      (errorf 'is-variable? "not implemented yet")))
  
  ;;;;;
  
  ;;; predicate:
  (define is-time?
    (lambda (v)
      (and (proper-list-of-given-length? v 2)
           (equal? (car v) 'time))))
  
  ;;; 1st accessor:
  (define time-1
    (lambda (v)
      (list-ref v 1)))
  
  ;;;;;
  
  ;;; predicate:
  (define is-if?
    (lambda (v)
      (and (proper-list-of-given-length? v 4)
           (equal? (car v) 'if))))
  
  ;;; 1st accessor:
  (define if-1
    (lambda (v)
      (list-ref v 1)))
  
  ;;; 2nd accessor:
  (define if-2
    (lambda (v)
      (list-ref v 2)))
  
  ;;; 3rd accessor:
  (define if-3
    (lambda (v)
      (list-ref v 3)))
  
  ;;;;;
  
  ;;; predicate:
  (define is-quote?
    (lambda (v)
      (and (proper-list-of-given-length? v 2)
           (equal? (car v) 'quote))))
  
  ;;; 1st accessor:
  (define quote-1
    (lambda (v)
      (list-ref v 1)))
  
  ;;;;;
  
  ;;; predicate:
  (define is-application?
    (lambda (v)
      (and (pair? v)
           (let ([w (car v)])
             (if (symbol? w)
                 (not (keyword? w))
                 #t)))))
  
  ;;; 1st accessor:
  (define application-operator
    car)
  
  ;;; 2nd accessor:
  (define application-operands
    cdr)
  
  ;;;;;;;;;;
  ;;; the syntax checker proper for expressions:
  ;;;;;;;;;;
  
  (define check-expression
    (lambda (v)
      (cond
        [(is-number? v)
         (check-number v)]
        [(is-boolean? v)
         (check-boolean v)]
        [(is-character? v)
         (check-character v)]
        [(is-string? v)
         (check-string v)]
        [(is-variable? v)
         (check-variable v)]
        [(is-time? v)
         (check-time-expression (time-1 v))]
        [(is-if? v)
         (check-if-expression (if-1 v) (if-2 v) (if-3 v))]
        ;;; cond
        ;;; and
        ;;; or
        ;;; etc.
        [(is-quote? v)
         (check-quote-expression (quote-1 v))]
        [(is-application? v)
         (check-application (application-operator v) (application-operands v))]
        [else
         (or check-silently
             (begin
               (printf "check-expression -- unrecognized input: ~s~n" v)
               #f))])))
  
  (define check-number
    (lambda (n)
      #t))
  
  (define check-boolean
    (lambda (b)
      #t))
  
  (define check-character
    (lambda (c)
      (errorf 'check-character "not implemented yet")))
  
  (define check-string
    (lambda (s)
      (errorf 'check-string "not implemented yet")))
  
  (define check-variable
    (lambda (v)
      (errorf 'check-variable "not implemented yet")))
  
  (define check-time-expression
    (lambda (v)
      (check-expression v)))
  
  (define check-if-expression
    (lambda (test consequent alternative)
      (and (check-expression test)
           (check-expression consequent)
           (check-expression alternative))))
  
  (define check-quote-expression
    (lambda (v)
      (errorf 'check-quote-expression "not implemented yet")))
  
  (define check-application
    (lambda (v vs)
      (errorf 'check-application "not implemented yet")))
  
  ;;;;;;;;;;
  ;;; auxiliaries:
  ;;;;;;;;;;
  
  (define keyword?
    (lambda (w)
      (errorf 'keyword "not implemented yet")))
  
  (define list-strictly-longer-than?
    (lambda (v n)
      (letrec ([visit (lambda (v i)
                        (and (pair? v)
                             (or (= i 0)
                                 (visit (cdr v)
                                        (1- i)))))])
        (if (>= n 0)
            (visit v n)
            (errorf 'list-strictly-longer-than? "negative length: ~s" n)))))
  
  ;;; reads an entire file as a list of Scheme data
  ;;; use: (read-file "filename.scm")
  (define read-file
    (lambda (filename)
      (call-with-input-file filename
        (lambda (p)
          (letrec ([visit (lambda ()
                            (let ([in (read p)])
                              (if (eof-object? in)
                                  '()
                                  (cons in (visit)))))])
            (visit))))))
  
  ;;; interface: 
  (define check-file
    (lambda (filename)
      (if (string? filename)
          (check-program (read-file filename))
          (errorf 'check-file "not a string: ~s" filename))))
  
  ;;;;;;;;;;

Example of use::

  Petite Chez Scheme Version 8.4
  Copyright (c) 1985-2011 Cadence Research Systems
  
  > (load "my-very-own-self-applicable-syntax-checker-oh-yeah.scm")
  > (check-file "my-very-own-self-applicable-syntax-checker-oh-yeah.scm")
  #t
  > (check-file "week-6-basic-imperative-language_a-syntax-checker.scm")
  #t
  > (check-file "week-6-basic-imperative-language_an-interpreter.scm")
  #t
  > (check-expression '(if 1 2 3))
  #t
  > (check-expression '(time is money))
  #f
  > 

Voilà.  Happy hacking.

Hint: do peruse the lecture note about `a syntax checker for a basic
imperative language <week-6-basic-imperative-language_a-syntax-checker.html>`_.


Resources
---------

* The Scheme code
  `to get you started with your syntax checker
  <http://users-cs.au.dk/danvy/CS6202/Supplementary-material/week-6-a-syntax-checker-for-Scheme-part-1.scm>`_
  (latest version: 15 Sep 2015).

* `The online syntax checker <https://users-cs.au.dk/zerny/dProgSprog/syntax-checker.php>`_.


Version
-------

Created
[15 Sep 2015]
